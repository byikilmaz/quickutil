# QuickUtil.app - Cursor Rules
# PDF sıkıştırma ve dosya işleme araçları sunan Next.js uygulaması

## 🎯 Proje Bağlamı
- **Proje**: QuickUtil.app - PDF ve dosya işleme web uygulaması
- **Tech Stack**: Next.js 15, React 19, TypeScript, Firebase, Tailwind CSS
- **Canlı URL**: https://quickutil.app (Default Domain)
- **Firebase Project**: quickutil-d2998
- **SEO**: Sitemap, robots.txt, canonical URLs optimize edildi

## 🛠️ Teknoloji Kuralları

### Next.js & React
- Next.js 15 App Router yapısını kullan
- Server Components öncelikli yaklaşım
- Client Components'leri sadece interaktif özellikler için kullan
- TypeScript strict mode kurallarına uy
- React 19 özelliklerini kullan (Server Actions, Suspense, etc.)

### TypeScript
- Strict mode aktif - her zaman tip güvenliği sağla
- Interface kullanımını type'a tercih et
- Generics'i etkili kullan
- null/undefined kontrollerini ihmal etme
- @/* path alias'ını kullan

### Firebase
- Authentication: Firebase Auth kullan
- Database: Firestore kullan
- Storage: Firebase Storage kullan
- Security Rules'a uygun veri erişimi
- Error handling ve loading states'leri dahil et

### Tailwind CSS
- Utility-first yaklaşım
- Responsive design (mobile-first)
- Dark mode desteği hazırlığı
- Custom components için className prop'ları kullan

## 📂 Klasör Yapısı Kuralları

### Dosya Organizasyonu
```
src/
├── app/                    # Next.js 15 App Router
│   ├── (routes)/          # Route groups
│   ├── api/               # API routes
│   ├── globals.css        # Global styles
│   └── layout.tsx         # Root layout
├── components/            # Reusable components
│   ├── ui/               # Base UI components
│   ├── forms/            # Form components
│   └── [feature]/        # Feature-specific components
├── lib/                  # Utility functions
│   ├── firebase.ts       # Firebase config
│   ├── utils.ts          # General utilities
│   └── [feature]Utils.ts # Feature-specific utils
├── contexts/             # React contexts
├── hooks/               # Custom hooks
├── types/               # TypeScript type definitions
└── constants/           # App constants
```

### Dosya Adlandırma
- React components: PascalCase (UserProfile.tsx)
- Utility functions: camelCase (formatDate.ts)
- Constants: UPPER_SNAKE_CASE (API_ENDPOINTS.ts)
- Hook files: use* prefix (useAuth.ts)

## 🎨 Kod Stilı Kuralları

### Component Yapısı
```typescript
// İmport sırası: React → Next.js → Third-party → Local
import { useState, useEffect } from 'react';
import { NextPage } from 'next';
import { Button } from '@/components/ui/Button';
import { useAuth } from '@/hooks/useAuth';

// Interface tanımları component'ten önce
interface ComponentProps {
  title: string;
  onAction: () => void;
}

// Component tanımı
const Component: React.FC<ComponentProps> = ({ title, onAction }) => {
  // State hooks
  const [loading, setLoading] = useState(false);
  
  // Custom hooks
  const { user } = useAuth();
  
  // Effect hooks
  useEffect(() => {
    // Logic here
  }, []);
  
  // Event handlers
  const handleAction = async () => {
    setLoading(true);
    try {
      await onAction();
    } catch (error) {
      console.error('Error:', error);
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <div className="flex flex-col gap-4">
      <h1 className="text-2xl font-bold">{title}</h1>
      <Button onClick={handleAction} disabled={loading}>
        {loading ? 'Loading...' : 'Action'}
      </Button>
    </div>
  );
};

export default Component;
```

### Error Handling
- Try-catch blokları kullan
- User-friendly error messages
- Loading states göster
- Firebase error codes'ları handle et

### Performance
- Lazy loading için React.lazy kullan
- Image optimization için next/image
- Bundle size için dynamic imports
- Memoization (useMemo, useCallback) gerektiğinde

## 🔧 PDF İşleme Kuralları

### PDF Sıkıştırma
```typescript
// pdf-lib kullanımı
import { PDFDocument } from 'pdf-lib';

const compressPDF = async (file: File, quality: number) => {
  const arrayBuffer = await file.arrayBuffer();
  const pdfDoc = await PDFDocument.load(arrayBuffer);
  
  // Compression logic
  const compressedBytes = await pdfDoc.save({
    useObjectStreams: false,
    objectsPerTick: 50,
  });
  
  return new Blob([compressedBytes], { type: 'application/pdf' });
};
```

### PDF Dönüştürme
```typescript
// PDF'yi sayfalara ayırma
import { PDFDocument, degrees, rgb } from 'pdf-lib';

const splitPDF = async (file: File): Promise<ConversionResult[]> => {
  const arrayBuffer = await file.arrayBuffer();
  const pdfDoc = await PDFDocument.load(arrayBuffer);
  const pages = pdfDoc.getPages();
  
  const results: ConversionResult[] = [];
  for (let i = 0; i < pages.length; i++) {
    const newDoc = await PDFDocument.create();
    const [copiedPage] = await newDoc.copyPages(pdfDoc, [i]);
    newDoc.addPage(copiedPage);
    
    const pdfBytes = await newDoc.save();
    results.push({
      name: file.name.replace('.pdf', `_sayfa_${i + 1}.pdf`),
      url: URL.createObjectURL(new Blob([pdfBytes])),
      size: pdfBytes.length,
      type: 'application/pdf'
    });
  }
  return results;
};

// PDF birleştirme
const mergePDFs = async (files: File[]): Promise<ConversionResult> => {
  const mergedDoc = await PDFDocument.create();
  
  for (const file of files) {
    const arrayBuffer = await file.arrayBuffer();
    const pdfDoc = await PDFDocument.load(arrayBuffer);
    const pages = await mergedDoc.copyPages(pdfDoc, pdfDoc.getPageIndices());
    pages.forEach(page => mergedDoc.addPage(page));
  }
  
  const pdfBytes = await mergedDoc.save();
  return {
    name: 'birlestirilmis_dokuman.pdf',
    url: URL.createObjectURL(new Blob([pdfBytes])),
    size: pdfBytes.length,
    type: 'application/pdf'
  };
};
```

### PDF Özellikleri
- Text extraction (OCR ready)
- Page splitting ve merging
- Watermark ekleme
- Page rotation
- Metadata editing
- PDF to Images conversion (PDF.js entegrasyonu)

### PDF to Images Dönüştürme
```typescript
// PDF.js ile PDF to Images conversion
import { convertPDFToImages } from '@/lib/pdfConvertUtils';

const convertToImages = async (file: File) => {
  try {
    // PDF.js dinamik import ile worker kurulumu
    const results = await convertPDFToImages(
      file, 
      'png',     // format: 'png' | 'jpeg'
      0.9,       // quality: 0.1-1.0
      2.0        // scale: render kalitesi
    );
    
    return results; // ConversionResult[]
  } catch (error) {
    console.error('PDF to Images error:', error);
    throw error;
  }
};
```

### PDF.js Entegrasyon Kuralları
- Dinamik import kullan: `await import('pdfjs-dist')`
- Worker LOCAL dosyadan yükle: `/js/pdf.worker.min.js` (CDN değil!)
- Canvas rendering için 2D context kullan
- Scale parametresi ile çözünürlük ayarla
- Error handling detaylı mesajlarla
- Worker dosyası `public/js/pdf.worker.min.js` olarak serve edilmeli
- **CRITICAL**: API ve Worker sürümlerinin eşleşmesi gerekli!
- ES module (.mjs) formatı destekli worker kullan
- Cache buster kullan: `?v=VERSION_NUMBER` - browser cache sorunlarını önler

### Dosya İşleme
- File validation (size, type)
- Progress tracking
- Memory optimization
- Error recovery
- Batch processing

## 🚗 Google Drive Entegrasyon Kuralları (Server-Side Architecture)

### Server-Side Service Account Implementation
```typescript
// Firebase Functions ile Google Drive API entegrasyonu
const { google } = require('googleapis');
const serviceAccount = require('./quickutil-service-account.json');

class GoogleDriveService {
  static async getAuth() {
    return new google.auth.GoogleAuth({
      credentials: serviceAccount,
      scopes: ['https://www.googleapis.com/auth/drive.file']
    });
  }

  static async getDrive() {
    const auth = await this.getAuth();
    return google.drive({ version: 'v3', auth });
  }

  static async uploadFile(fileBuffer, fileName, mimeType) {
    const drive = await this.getDrive();
    const folderId = await this.getOrCreateQuickUtilFolder();

    const response = await drive.files.create({
      resource: { name: fileName, parents: [folderId] },
      media: { mimeType, body: fileBuffer },
      fields: 'id,name,size,createdTime,mimeType'
    });

    return response.data;
  }
}
```

### Firebase Functions Architecture
```typescript
// uploadFile Firebase Function
exports.uploadFile = functions.https.onRequest(async (req, res) => {
  // Firebase Auth token verification
  const authHeader = req.headers.authorization;
  const token = authHeader.split('Bearer ')[1];
  const decodedToken = await admin.auth().verifyIdToken(token);
  const userId = decodedToken.uid;

  // Multipart form data parsing
  const busboy = Busboy({ headers: req.headers });
  
  // Google Drive upload
  const uploadedFile = await GoogleDriveService.uploadFile(
    fileBuffer, fileName, mimeType
  );

  // Firestore activity tracking
  await admin.firestore().collection('userActivities').add({
    userId,
    type: 'file_upload',
    fileName,
    fileSize: fileBuffer.length,
    googleDriveFileId: uploadedFile.id,
    timestamp: admin.firestore.FieldValue.serverTimestamp(),
    expiresAt: new Date(Date.now() + (30 * 24 * 60 * 60 * 1000))
  });
});
```

### Client-Side Server API Integration
```typescript
// Client-side server API kullanımı
import { googleDriveServerClient } from '@/lib/googleDriveServerClient';

const uploadToGoogleDrive = async (file: File) => {
  try {
    // Firebase Auth token al
    const token = await user.getIdToken();
    
    // Server-side API'ye gönder
    const result = await googleDriveServerClient.uploadFile(file, token);
    
    return result;
  } catch (error) {
    console.error('Upload error:', error);
    throw error;
  }
};
```

### React Context State Management
```typescript
// Centralized Cloud Storage Context
const GoogleDriveContext = createContext<GoogleDriveContextType>();

export const GoogleDriveProvider = ({ children }) => {
  const [quota, setQuota] = useState<GoogleDriveQuota>();
  const [files, setFiles] = useState<GoogleDriveFile[]>([]);
  const { user } = useAuth();
  
  const value = {
    quota,
    files,
    uploadFile: (file: File) => uploadToServerDrive(file),
    listFiles: () => listServerFiles(),
    deleteFile: (fileId: string) => deleteFromServerDrive(fileId),
    downloadFile: (fileId: string) => downloadFromServerDrive(fileId),
    getQuotaInfo: () => getServerQuotaInfo()
  };
  
  return (
    <GoogleDriveContext.Provider value={value}>
      {children}
    </GoogleDriveContext.Provider>
  );
};
```

### Environment & Configuration
```bash
# Firebase Functions Service Account (JSON dosyası)
functions/quickutil-service-account.json

# Firebase Functions Config (backup method)
firebase functions:config:set google.client_email="quickutil-drive@quickutil-d2998.iam.gserviceaccount.com"
```

### Firebase Functions Endpoints
```typescript
// Production endpoints
const FUNCTIONS_BASE_URL = 'https://us-central1-quickutil-d2998.cloudfunctions.net';

const endpoints = {
  uploadFile: `${FUNCTIONS_BASE_URL}/uploadFile`,
  listFiles: `${FUNCTIONS_BASE_URL}/listFiles`,
  deleteFile: `${FUNCTIONS_BASE_URL}/deleteFile`,
  downloadFile: `${FUNCTIONS_BASE_URL}/downloadFile`,
  getQuotaInfo: `${FUNCTIONS_BASE_URL}/getQuotaInfo`,
  healthCheck: `${FUNCTIONS_BASE_URL}/healthCheck`
};
```

### Security Best Practices
- **Service Account**: Merkezi Google Drive hesabı (quickutil-drive@quickutil-d2998.iam.gserviceaccount.com)
- **Firebase Auth**: Tüm endpoints'te user token verification
- **File Ownership**: Firestore'da user-file associations
- **Scope Limitation**: Sadece `drive.file` scope (app'in oluşturduğu dosyalar)
- **30-day TTL**: Otomatik dosya silme (expiresAt field)
- **IAM Permissions**: Firebase Functions için `allUsers` invoker role gerekli

### UI/UX Guidelines
```typescript
// Centralized Cloud Storage Card
const GoogleDriveCard = () => {
  const { quota, files, uploadFile } = useGoogleDrive();
  
  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <h3>Merkezi Bulut Depolama</h3>
        <div className="w-3 h-3 rounded-full bg-green-500" />
      </div>
      
      {/* Storage Info */}
      <div className="mb-4">
        <p className="text-sm text-gray-600">
          {formatBytes(quota.usage)} / {formatBytes(quota.limit)} kullanıldı
        </p>
        <div className="w-full bg-gray-200 rounded-full h-2">
          <div 
            className="bg-blue-600 h-2 rounded-full" 
            style={{ width: `${(quota.usage / quota.limit) * 100}%` }}
          />
        </div>
      </div>
      
      {/* File List */}
      <FileList files={files} onUpload={uploadFile} />
    </div>
  );
};
```

### Error Handling
```typescript
// Server-side Google Drive error handling
const handleGoogleDriveError = (error: unknown) => {
  if (error instanceof Error) {
    // Firebase Auth errors
    if (error.message.includes('Unauthorized')) {
      return 'Giriş yapmanız gerekiyor';
    }
    
    // Google Drive quota errors
    if (error.message.includes('quota')) {
      return 'Depolama alanı dolu, eski dosyalar silinecek';
    }
    
    // File not found errors
    if (error.message.includes('File not found')) {
      return 'Dosya bulunamadı veya erişim izniniz yok';
    }
  }
  
  return 'Sunucu hatası, lütfen tekrar deneyin';
};
```

### Activity Tracking Integration
```typescript
// Firestore activity tracking (server-side)
await admin.firestore().collection('userActivities').add({
  userId,
  type: 'file_upload',
  fileName,
  fileSize: fileBuffer.length,
  googleDriveFileId: uploadedFile.id,
  timestamp: admin.firestore.FieldValue.serverTimestamp(),
  expiresAt: new Date(Date.now() + (30 * 24 * 60 * 60 * 1000)), // 30 days
  status: 'success'
});

// Cleanup scheduler (Firebase Functions)
exports.cleanupExpiredFiles = functions.pubsub
  .schedule('every 24 hours')
  .timeZone('Europe/Istanbul')
  .onRun(async (context) => {
    const expiredActivities = await admin.firestore()
      .collection('userActivities')
      .where('expiresAt', '<=', new Date())
      .where('status', '==', 'success')
      .get();

    // Delete expired files from Google Drive
    for (const doc of expiredActivities.docs) {
      const data = doc.data();
      await GoogleDriveService.deleteFile(data.googleDriveFileId);
      await doc.ref.update({ status: 'expired' });
    }
  });
```

### Performance Optimization
- **Server-Side Processing**: Dosya işlemleri Firebase Functions'ta
- **Firestore Caching**: User file associations'ları cache'leme
- **Parallel Operations**: Multiple file operations server-side'da parallel
- **Quota Monitoring**: Real-time quota tracking (16GB limit)
- **Background Cleanup**: 30 günlük otomatik dosya silme
- **Stream Downloads**: Memory-efficient file downloading

## 🎯 UI/UX Kuralları

### Accessibility
- ARIA labels kullan
- Keyboard navigation desteği
- Screen reader friendly
- Color contrast ratios

### Responsive Design
- Mobile-first approach
- Touch-friendly interfaces
- Proper spacing (p-4, m-2, etc.)
- Flexible layouts (flex, grid)

### Modern Form Design
```typescript
// Enhanced form input styling
.form-input {
  @apply w-full px-4 py-3 border border-gray-300 rounded-lg;
  @apply focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent;
  @apply text-gray-900 placeholder-gray-500 bg-white;
  @apply transition-all duration-200;
}

// Form field structure
<div>
  <label htmlFor="field" className="block text-sm font-medium text-gray-700 mb-2">
    Field Label *
  </label>
  <input
    type="text"
    id="field"
    className="form-input"
    placeholder="Placeholder text"
    required
  />
</div>
```

### Authentication Form Guidelines
```typescript
// Ad/Soyad alanları ayrı ayrı
const [firstName, setFirstName] = useState('');
const [lastName, setLastName] = useState('');

// Şifre görünürlük toggle
const [showPassword, setShowPassword] = useState(false);

// Firebase'de ayrı ayrı kaydetme
await setDoc(doc(firestore, 'users', user.uid), {
  firstName,
  lastName,
  email,
  createdAt: new Date(),
  updatedAt: new Date()
});
```

### Animation & Transitions
```css
/* Custom animations in globals.css */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes slideIn {
  from { opacity: 0; transform: translateX(-20px); }
  to { opacity: 1; transform: translateX(0); }
}

@keyframes bounceIn {
  0% { opacity: 0; transform: scale(0.3); }
  50% { opacity: 1; transform: scale(1.05); }
  70% { transform: scale(0.9); }
  100% { opacity: 1; transform: scale(1); }
}

/* Usage classes */
.animate-fade-in { animation: fadeIn 0.5s ease-out; }
.animate-slide-in { animation: slideIn 0.6s ease-out; }
.animate-bounce-in { animation: bounceIn 0.6s ease-out; }
```

### Component Hover Effects
```typescript
// Modern card hover effects
<div className="relative bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-xl transition-all duration-300 hover:border-blue-300 group-hover:scale-105 overflow-hidden">
  {/* Hover gradient background */}
  <div className="absolute inset-0 bg-gradient-to-br from-blue-50/50 to-purple-50/50 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
  
  {/* Content with z-index */}
  <div className="relative z-10">
    {/* Content here */}
  </div>
</div>
```

### Button Design System
```css
/* Primary button */
.btn-primary {
  @apply bg-gradient-to-r from-blue-600 to-blue-700 text-white;
  @apply px-6 py-3 rounded-lg font-medium;
  @apply hover:from-blue-700 hover:to-blue-800;
  @apply transition-all duration-200 shadow-lg hover:shadow-xl;
  @apply disabled:opacity-50 disabled:cursor-not-allowed;
}

/* Loading state */
{loading ? (
  <div className="flex items-center justify-center">
    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white">
      {/* Spinner SVG */}
    </svg>
    Yükleniyor...
  </div>
) : (
  'Button Text'
)}
```

### File Upload Experience
```typescript
// Enhanced drag & drop with visual feedback
const [isHovering, setIsHovering] = useState(false);

// Dropzone configuration
const { getRootProps, getInputProps, isDragActive } = useDropzone({
  onDrop,
  onDragEnter: () => setIsHovering(true),
  onDragLeave: () => setIsHovering(false),
  onDropAccepted: () => setIsHovering(false),
  onDropRejected: () => setIsHovering(false)
});

// Dynamic styling based on state
className={`relative border-2 border-dashed rounded-xl p-8 text-center cursor-pointer transition-all duration-300 ${
  isDragActive || isHovering
    ? 'border-blue-500 bg-blue-50 scale-105'
    : 'border-gray-300 hover:border-gray-400 hover:bg-gray-50'
}`}
```

### Loading States
```typescript
const [isLoading, setIsLoading] = useState(false);

// Enhanced loading UI with animations
{isLoading ? (
  <div className="flex items-center justify-center p-8">
    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
  </div>
) : (
  <ContentComponent />
)}
```

### User Profile Display
```typescript
// User avatar with initials
const getUserInitials = () => {
  if (userProfile) {
    return `${userProfile.firstName.charAt(0)}${userProfile.lastName.charAt(0)}`.toUpperCase();
  }
  return 'K';
};

// Profile dropdown menu
<div className="relative" ref={userMenuRef}>
  <button className="flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-50 transition-colors">
    <div className="w-8 h-8 bg-gradient-to-br from-blue-600 to-purple-700 rounded-full flex items-center justify-center">
      <span className="text-white font-medium text-sm">
        {getUserInitials()}
      </span>
    </div>
    {/* User info */}
  </button>
</div>
```

### Progressive Enhancement
- Staggered animations for list items
- Scroll-triggered animations
- Hover state feedback
- Loading skeleton states
- Error state handling with icons
- Success state confirmations

### Mobile Optimization
- Touch-friendly 44px+ targets
- Swipe gestures support
- Haptic feedback indicators
- Orientation-aware layouts
- Performance-optimized animations

## 🔐 Güvenlik Kuralları

### Firebase Security
- Authentication required routes
- Firestore security rules
- File upload validation
- Rate limiting

### Data Validation
- Input sanitization
- File type validation
- Size limits
- XSS prevention

## 📊 Performance Kuralları

### Code Splitting
```typescript
// Dynamic imports
const AdminPanel = dynamic(() => import('@/components/AdminPanel'), {
  loading: () => <div>Loading...</div>,
});
```

### Optimization
- Image optimization
- Font optimization
- CSS purging
- JavaScript minification

## 🧪 Test Kuralları

### Unit Testing
- Component testing
- Utility function testing
- Hook testing
- Mock external dependencies

### Integration Testing
- API endpoint testing
- User flow testing
- Firebase integration testing

## 📝 Dokümantasyon Kuralları

### Code Comments
```typescript
/**
 * PDF sıkıştırma fonksiyonu
 * @param file - Sıkıştırılacak PDF dosyası
 * @param quality - Sıkıştırma kalitesi (0-1)
 * @returns Sıkıştırılmış PDF Blob
 */
const compressPDF = async (file: File, quality: number): Promise<Blob> => {
  // Implementation
};
```

### README Updates
- Feature açıklamaları
- Setup instructions
- API documentation
- Deployment guide

## 🚀 Deployment Kuralları

### Build Process
- Type checking
- ESLint validation
- Build optimization
- Environment variables

### Firebase Deployment
```json
{
  "hosting": {
    "public": "out",
    "ignore": ["firebase.json", "**/.*", "**/node_modules/**"],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ]
  }
}
```

## 🔍 Debugging Kuralları

### Console Logging
```typescript
// Development only
if (process.env.NODE_ENV === 'development') {
  console.log('Debug info:', data);
}
```

### Error Tracking
- Structured error logging
- User action tracking
- Performance monitoring
- Firebase Analytics

## 📱 Mobile Kuralları

### Touch Interactions
- Minimum 44px touch targets
- Swipe gestures
- Haptic feedback
- Orientation support

### Performance
- Lazy loading
- Image optimization
- Reduced animations
- Efficient rendering

## 🔍 SEO Kuralları

### Structured Data (Schema.org)
```typescript
// JSON-LD structured data kullan
import StructuredData from '@/components/StructuredData';

// WebSite, WebApplication, HowTo, FAQ schemas
<StructuredData type="website" />
<StructuredData type="howto" data={{ title: "...", steps: [...] }} />
```

### Meta Tags Optimization
```typescript
// Sayfa özelinde meta tags
import { generatePageMetadata, getPageSEOData } from '@/lib/seoUtils';

export const metadata = generatePageMetadata(getPageSEOData('page-name'));
```

### Header Hierarchy
- **H1**: Tek ve benzersiz sayfa başlığı
- **H2**: Ana bölüm başlıkları
- **H3**: Alt bölüm başlıkları
- Logical hierarchy: H1 > H2 > H3 sırası

### Image SEO
```typescript
// Context-aware alt text
<Image 
  alt={generateImageAlt('pdf-compress', 'Dosya yükleme alanı')}
  loading="lazy"
  sizes="(max-width: 768px) 100vw, 50vw"
/>
```

### Breadcrumbs
```typescript
// Auto-generated breadcrumbs
import Breadcrumb from '@/components/Breadcrumb';
<Breadcrumb /> // pathname bazlı otomatik
```

### Performance SEO
- **Core Web Vitals**: LCP, FID, CLS optimize et
- **Bundle splitting**: Vendor chunks ayrı
- **Dynamic imports**: Non-critical components lazy load
- **Compression**: gzip/brotli aktif

## 🎨 Design System

### Color Palette
```css
/* Primary colors */
--primary-50: #eff6ff;
--primary-500: #3b82f6;
--primary-900: #1e3a8a;

/* Semantic colors */
--success: #10b981;
--warning: #f59e0b;
--error: #ef4444;
```

### Typography
```css
/* Headings */
.heading-1 { @apply text-4xl font-bold; }
.heading-2 { @apply text-3xl font-semibold; }
.heading-3 { @apply text-2xl font-semibold; }

/* Body text */
.body-lg { @apply text-lg; }
.body-sm { @apply text-sm; }
```

## 🔄 Git Kuralları

### Commit Messages
```
feat: PDF compression algorithm improvement [NOTION-123]
fix: Turkish language support bug [NOTION-124]
ui: responsive design optimization [NOTION-125]
docs: update API documentation
test: add unit tests for PDF utils
```

### Branch Naming
```
feature/pdf-compression-improvement
bugfix/turkish-language-support
ui/responsive-design-optimization
hotfix/critical-security-patch
```

## 📊 Analytics & Monitoring

### Firebase Analytics
- User engagement tracking
- Feature usage metrics
- Performance monitoring
- Error tracking

### Custom Events
```typescript
import { analytics } from '@/lib/firebase';
import { logEvent } from 'firebase/analytics';

// Track user actions
logEvent(analytics, 'pdf_compressed', {
  file_size: fileSize,
  compression_ratio: ratio,
  processing_time: time
});
```

## 🎯 Öncelik Sırası

1. **Güvenlik**: Input validation, authentication
2. **Performance**: Loading times, optimization, Core Web Vitals
3. **Accessibility**: WCAG compliance, ARIA labels, semantic HTML
4. **User Experience**: Intuitive interface
5. **Mobile Experience**: Touch-friendly design
6. **SEO**: Meta tags, structured data, rich snippets, breadcrumbs, header hierarchy
7. **Analytics**: User behavior tracking
8. **Testing**: Unit & integration tests

## 🗂️ Cache Management Kuralları

### Browser Cache Strategy
```typescript
// Firebase hosting cache headers
{
  "source": "**/*.@(js|css)",
  "headers": [
    {
      "key": "Cache-Control",
      "value": "public, max-age=31536000, immutable"
    }
  ]
}
```

### Service Worker Implementation
```typescript
// Service worker for cache invalidation
const CACHE_NAME = `quickutil-cache-${Date.now()}`;

// Cache busting strategy
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => cache.addAll(STATIC_ASSETS))
  );
  self.skipWaiting();
});
```

### Cache Busting Techniques
- **Build ID**: Unique timestamp-based build IDs
- **Asset Versioning**: Automatic file hash generation
- **Service Worker**: Cache invalidation on updates
- **HTTP Headers**: Proper cache control headers

### Next.js Cache Configuration
```typescript
// next.config.ts optimizations
export default {
  generateBuildId: async () => {
    return `build-${Date.now()}-${Math.random().toString(36).substring(2, 8)}`;
  },
  
  experimental: {
    optimizeCss: true,
    optimizeServerReact: true,
  }
};
```

### Cache Management Tools
```typescript
// CacheManager component for manual cache clearing
const clearAllCaches = async () => {
  // Clear browser cache
  const cacheNames = await caches.keys();
  await Promise.all(cacheNames.map(name => caches.delete(name)));
  
  // Clear service worker cache
  navigator.serviceWorker.controller?.postMessage({ type: 'CACHE_UPDATE' });
  
  // Reload page
  window.location.reload();
};
```

### Deployment Cache Strategy
```bash
# NPM Scripts for cache management
"deploy:fresh": "npm run build && firebase deploy --force"
"cache:clear": "rm -rf .next && rm -rf out && npm run build"
"version:bump": "npm version patch && git push origin main --tags"
```

### Cache Invalidation Rules
1. **Static Assets**: Long-term cache (1 year) with immutable flag
2. **HTML Files**: No cache, always revalidate
3. **API Responses**: Short-term cache with proper ETags
4. **Service Worker**: Automatic cache clearing on updates
5. **Manual Override**: CacheManager component for force refresh

### User Experience
- **Auto-update notifications**: Service worker update prompts
- **Manual cache clearing**: Development tools in header
- **Progressive enhancement**: Graceful fallback for cache failures
- **Loading states**: Clear feedback during cache operations

## 📧 Email Verification Kuralları

### Resend API Integration
```typescript
// Firebase Functions ile Resend kullanımı
const { Resend } = require('resend');
const resend = new Resend(RESEND_API_KEY);

const result = await resend.emails.send({
  from: 'QuickUtil Team <noreply@quickutil.app>',
  to: [email],
  subject: '✨ QuickUtil Hesabınızı Doğrulayın',
  html: htmlTemplate,
  text: textVersion,
  tags: [{ name: 'category', value: 'email_verification' }]
});
```

### Email Template Guidelines
- **Professional Design**: QuickUtil branding ile tutarlı
- **Responsive**: Mobil ve desktop uyumlu
- **Accessible**: Yüksek kontrastlı renkler, semantic HTML
- **Modern Animations**: Gradients, shadows, hover effects
- **CTA Buttons**: Belirgin ve erişilebilir aksiyon butonları
- **Security Notice**: Güvenlik uyarıları ve süre bildirimi

### Domain Authentication (Gerekli)
```dns
# SPF Record
quickutil.app TXT "v=spf1 include:_spf.resend.com ~all"

# DKIM Record (Resend vereceği)
re._domainkey.quickutil.app TXT "p=MIGfMA0GCSqGSI..."

# DMARC Record
_dmarc.quickutil.app TXT "v=DMARC1; p=quarantine;"
```

### Firebase Functions Structure
```
functions/
├── index.js              # Email functions
├── package.json          # Resend dependency
└── .eslintrc.js          # ESLint config
```

### AuthContext Email Flow
```typescript
const register = async (email, password, firstName, lastName) => {
  // 1. Create user with Firebase Auth
  const { user } = await createUserWithEmailAndPassword(auth, email, password);
  
  // 2. Save profile to Firestore
  await setDoc(doc(firestore, 'users', user.uid), {
    firstName, lastName, email, emailVerified: false
  });
  
  // 3. Send verification email via Firebase Function
  const sendEmail = httpsCallable(functions, 'sendVerificationEmail');
  await sendEmail({ email, firstName, lastName, verificationLink });
};
```

### Verification Page (/verify-email)
- **Suspense Boundary**: useSearchParams() için gerekli
- **Loading States**: Spinner ve progress indicators
- **Success/Error States**: Clear feedback ve next steps
- **Resend Functionality**: Rate limiting ile email tekrar gönderme

### Email Verification Security
- **24 saat TTL**: Verification links expire
- **One-time use**: Bağlantılar tek kullanımlık
- **UID validation**: User identity verification
- **Firestore update**: emailVerified flag'i güncelle

## 📝 Notlar

- Her yeni özellik için Notion'da task oluştur
- Code review için pull request kullan
- Documentation'ı güncel tut
- Performance metrics'leri izle
- User feedback'i toplam ve değerlendir
- Cache management değişikliklerini test et
- Email deliverability'yi izle (Resend dashboard)

---

Bu kurallar QuickUtil.app projesinin kalitesini, performansını ve maintainability'sini artırmak için tasarlanmıştır. Her zaman güncel tut ve proje gereksinimlerine göre adapte et. 