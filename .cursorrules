# QuickUtil.app - Cursor Rules
# PDF sıkıştırma ve dosya işleme araçları sunan Next.js uygulaması

## 🎯 Proje Bağlamı
- **Proje**: QuickUtil.app - PDF ve dosya işleme web uygulaması
- **Tech Stack**: Next.js 15, React 19, TypeScript, Firebase, Tailwind CSS
- **Canlı URL**: https://quickutil.app
- **Firebase Project**: quickutil-d2998

## 🛠️ Teknoloji Kuralları

### Next.js & React
- Next.js 15 App Router yapısını kullan
- Server Components öncelikli yaklaşım
- Client Components'leri sadece interaktif özellikler için kullan
- TypeScript strict mode kurallarına uy
- React 19 özelliklerini kullan (Server Actions, Suspense, etc.)

### TypeScript
- Strict mode aktif - her zaman tip güvenliği sağla
- Interface kullanımını type'a tercih et
- Generics'i etkili kullan
- null/undefined kontrollerini ihmal etme
- @/* path alias'ını kullan

### Firebase
- Authentication: Firebase Auth kullan
- Database: Firestore kullan
- Storage: Firebase Storage kullan
- Security Rules'a uygun veri erişimi
- Error handling ve loading states'leri dahil et

### Tailwind CSS
- Utility-first yaklaşım
- Responsive design (mobile-first)
- Dark mode desteği hazırlığı
- Custom components için className prop'ları kullan

## 📂 Klasör Yapısı Kuralları

### Dosya Organizasyonu
```
src/
├── app/                    # Next.js 15 App Router
│   ├── (routes)/          # Route groups
│   ├── api/               # API routes
│   ├── globals.css        # Global styles
│   └── layout.tsx         # Root layout
├── components/            # Reusable components
│   ├── ui/               # Base UI components
│   ├── forms/            # Form components
│   └── [feature]/        # Feature-specific components
├── lib/                  # Utility functions
│   ├── firebase.ts       # Firebase config
│   ├── utils.ts          # General utilities
│   └── [feature]Utils.ts # Feature-specific utils
├── contexts/             # React contexts
├── hooks/               # Custom hooks
├── types/               # TypeScript type definitions
└── constants/           # App constants
```

### Dosya Adlandırma
- React components: PascalCase (UserProfile.tsx)
- Utility functions: camelCase (formatDate.ts)
- Constants: UPPER_SNAKE_CASE (API_ENDPOINTS.ts)
- Hook files: use* prefix (useAuth.ts)

## 🎨 Kod Stilı Kuralları

### Component Yapısı
```typescript
// İmport sırası: React → Next.js → Third-party → Local
import { useState, useEffect } from 'react';
import { NextPage } from 'next';
import { Button } from '@/components/ui/Button';
import { useAuth } from '@/hooks/useAuth';

// Interface tanımları component'ten önce
interface ComponentProps {
  title: string;
  onAction: () => void;
}

// Component tanımı
const Component: React.FC<ComponentProps> = ({ title, onAction }) => {
  // State hooks
  const [loading, setLoading] = useState(false);
  
  // Custom hooks
  const { user } = useAuth();
  
  // Effect hooks
  useEffect(() => {
    // Logic here
  }, []);
  
  // Event handlers
  const handleAction = async () => {
    setLoading(true);
    try {
      await onAction();
    } catch (error) {
      console.error('Error:', error);
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <div className="flex flex-col gap-4">
      <h1 className="text-2xl font-bold">{title}</h1>
      <Button onClick={handleAction} disabled={loading}>
        {loading ? 'Loading...' : 'Action'}
      </Button>
    </div>
  );
};

export default Component;
```

### Error Handling
- Try-catch blokları kullan
- User-friendly error messages
- Loading states göster
- Firebase error codes'ları handle et

### Performance
- Lazy loading için React.lazy kullan
- Image optimization için next/image
- Bundle size için dynamic imports
- Memoization (useMemo, useCallback) gerektiğinde

## 🔧 PDF İşleme Kuralları

### PDF Sıkıştırma
```typescript
// pdf-lib kullanımı
import { PDFDocument } from 'pdf-lib';

const compressPDF = async (file: File, quality: number) => {
  const arrayBuffer = await file.arrayBuffer();
  const pdfDoc = await PDFDocument.load(arrayBuffer);
  
  // Compression logic
  const compressedBytes = await pdfDoc.save({
    useObjectStreams: false,
    objectsPerTick: 50,
  });
  
  return new Blob([compressedBytes], { type: 'application/pdf' });
};
```

### Dosya İşleme
- File validation (size, type)
- Progress tracking
- Memory optimization
- Error recovery

## 🎯 UI/UX Kuralları

### Accessibility
- ARIA labels kullan
- Keyboard navigation desteği
- Screen reader friendly
- Color contrast ratios

### Responsive Design
- Mobile-first approach
- Touch-friendly interfaces
- Proper spacing (p-4, m-2, etc.)
- Flexible layouts (flex, grid)

### Loading States
```typescript
const [isLoading, setIsLoading] = useState(false);

// Loading UI
{isLoading ? (
  <div className="flex items-center justify-center p-8">
    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
  </div>
) : (
  <ContentComponent />
)}
```

## 🔐 Güvenlik Kuralları

### Firebase Security
- Authentication required routes
- Firestore security rules
- File upload validation
- Rate limiting

### Data Validation
- Input sanitization
- File type validation
- Size limits
- XSS prevention

## 📊 Performance Kuralları

### Code Splitting
```typescript
// Dynamic imports
const AdminPanel = dynamic(() => import('@/components/AdminPanel'), {
  loading: () => <div>Loading...</div>,
});
```

### Optimization
- Image optimization
- Font optimization
- CSS purging
- JavaScript minification

## 🧪 Test Kuralları

### Unit Testing
- Component testing
- Utility function testing
- Hook testing
- Mock external dependencies

### Integration Testing
- API endpoint testing
- User flow testing
- Firebase integration testing

## 📝 Dokümantasyon Kuralları

### Code Comments
```typescript
/**
 * PDF sıkıştırma fonksiyonu
 * @param file - Sıkıştırılacak PDF dosyası
 * @param quality - Sıkıştırma kalitesi (0-1)
 * @returns Sıkıştırılmış PDF Blob
 */
const compressPDF = async (file: File, quality: number): Promise<Blob> => {
  // Implementation
};
```

### README Updates
- Feature açıklamaları
- Setup instructions
- API documentation
- Deployment guide

## 🚀 Deployment Kuralları

### Build Process
- Type checking
- ESLint validation
- Build optimization
- Environment variables

### Firebase Deployment
```json
{
  "hosting": {
    "public": "out",
    "ignore": ["firebase.json", "**/.*", "**/node_modules/**"],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ]
  }
}
```

## 🔍 Debugging Kuralları

### Console Logging
```typescript
// Development only
if (process.env.NODE_ENV === 'development') {
  console.log('Debug info:', data);
}
```

### Error Tracking
- Structured error logging
- User action tracking
- Performance monitoring
- Firebase Analytics

## 📱 Mobile Kuralları

### Touch Interactions
- Minimum 44px touch targets
- Swipe gestures
- Haptic feedback
- Orientation support

### Performance
- Lazy loading
- Image optimization
- Reduced animations
- Efficient rendering

## 🎨 Design System

### Color Palette
```css
/* Primary colors */
--primary-50: #eff6ff;
--primary-500: #3b82f6;
--primary-900: #1e3a8a;

/* Semantic colors */
--success: #10b981;
--warning: #f59e0b;
--error: #ef4444;
```

### Typography
```css
/* Headings */
.heading-1 { @apply text-4xl font-bold; }
.heading-2 { @apply text-3xl font-semibold; }
.heading-3 { @apply text-2xl font-semibold; }

/* Body text */
.body-lg { @apply text-lg; }
.body-sm { @apply text-sm; }
```

## 🔄 Git Kuralları

### Commit Messages
```
feat: PDF compression algorithm improvement [NOTION-123]
fix: Turkish language support bug [NOTION-124]
ui: responsive design optimization [NOTION-125]
docs: update API documentation
test: add unit tests for PDF utils
```

### Branch Naming
```
feature/pdf-compression-improvement
bugfix/turkish-language-support
ui/responsive-design-optimization
hotfix/critical-security-patch
```

## 📊 Analytics & Monitoring

### Firebase Analytics
- User engagement tracking
- Feature usage metrics
- Performance monitoring
- Error tracking

### Custom Events
```typescript
import { analytics } from '@/lib/firebase';
import { logEvent } from 'firebase/analytics';

// Track user actions
logEvent(analytics, 'pdf_compressed', {
  file_size: fileSize,
  compression_ratio: ratio,
  processing_time: time
});
```

## 🎯 Öncelik Sırası

1. **Güvenlik**: Input validation, authentication
2. **Performance**: Loading times, optimization
3. **Accessibility**: WCAG compliance
4. **User Experience**: Intuitive interface
5. **Mobile Experience**: Touch-friendly design
6. **SEO**: Meta tags, structured data
7. **Analytics**: User behavior tracking
8. **Testing**: Unit & integration tests

## 📝 Notlar

- Her yeni özellik için Notion'da task oluştur
- Code review için pull request kullan
- Documentation'ı güncel tut
- Performance metrics'leri izle
- User feedback'i toplam ve değerlendir

---

Bu kurallar QuickUtil.app projesinin kalitesini, performansını ve maintainability'sini artırmak için tasarlanmıştır. Her zaman güncel tut ve proje gereksinimlerine göre adapte et. 