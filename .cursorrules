# QuickUtil.app - Cursor Rules
# PDF sıkıştırma ve dosya işleme araçları sunan Next.js uygulaması

## 🎯 Proje Bağlamı
- **Proje**: QuickUtil.app - PDF ve dosya işleme web uygulaması
- **Tech Stack**: Next.js 15, React 19, TypeScript, Firebase, Tailwind CSS
- **Canlı URL**: https://quickutil.app (Default Domain)
- **Firebase Project**: quickutil-d2998
- **SEO**: Sitemap, robots.txt, canonical URLs optimize edildi

## 🛠️ Teknoloji Kuralları

### Next.js & React
- Next.js 15 App Router yapısını kullan
- Server Components öncelikli yaklaşım
- Client Components'leri sadece interaktif özellikler için kullan
- TypeScript strict mode kurallarına uy
- React 19 özelliklerini kullan (Server Actions, Suspense, etc.)

### TypeScript
- Strict mode aktif - her zaman tip güvenliği sağla
- Interface kullanımını type'a tercih et
- Generics'i etkili kullan
- null/undefined kontrollerini ihmal etme
- @/* path alias'ını kullan

### Firebase
- Authentication: Firebase Auth kullan
- Database: Firestore kullan
- Storage: Firebase Storage kullan
- Security Rules'a uygun veri erişimi
- Error handling ve loading states'leri dahil et

### Tailwind CSS
- Utility-first yaklaşım
- Responsive design (mobile-first)
- Dark mode desteği hazırlığı
- Custom components için className prop'ları kullan

## 📂 Klasör Yapısı Kuralları

### Dosya Organizasyonu
```
src/
├── app/                    # Next.js 15 App Router
│   ├── (routes)/          # Route groups
│   ├── api/               # API routes
│   ├── globals.css        # Global styles
│   └── layout.tsx         # Root layout
├── components/            # Reusable components
│   ├── ui/               # Base UI components
│   ├── forms/            # Form components
│   └── [feature]/        # Feature-specific components
├── lib/                  # Utility functions
│   ├── firebase.ts       # Firebase config
│   ├── utils.ts          # General utilities
│   └── [feature]Utils.ts # Feature-specific utils
├── contexts/             # React contexts
├── hooks/               # Custom hooks
├── types/               # TypeScript type definitions
└── constants/           # App constants
```

### Dosya Adlandırma
- React components: PascalCase (UserProfile.tsx)
- Utility functions: camelCase (formatDate.ts)
- Constants: UPPER_SNAKE_CASE (API_ENDPOINTS.ts)
- Hook files: use* prefix (useAuth.ts)

## 🎨 Kod Stilı Kuralları

### Component Yapısı
```typescript
// İmport sırası: React → Next.js → Third-party → Local
import { useState, useEffect } from 'react';
import { NextPage } from 'next';
import { Button } from '@/components/ui/Button';
import { useAuth } from '@/hooks/useAuth';

// Interface tanımları component'ten önce
interface ComponentProps {
  title: string;
  onAction: () => void;
}

// Component tanımı
const Component: React.FC<ComponentProps> = ({ title, onAction }) => {
  // State hooks
  const [loading, setLoading] = useState(false);
  
  // Custom hooks
  const { user } = useAuth();
  
  // Effect hooks
  useEffect(() => {
    // Logic here
  }, []);
  
  // Event handlers
  const handleAction = async () => {
    setLoading(true);
    try {
      await onAction();
    } catch (error) {
      console.error('Error:', error);
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <div className="flex flex-col gap-4">
      <h1 className="text-2xl font-bold">{title}</h1>
      <Button onClick={handleAction} disabled={loading}>
        {loading ? 'Loading...' : 'Action'}
      </Button>
    </div>
  );
};

export default Component;
```

### Error Handling
- Try-catch blokları kullan
- User-friendly error messages
- Loading states göster
- Firebase error codes'ları handle et

### Performance
- Lazy loading için React.lazy kullan
- Image optimization için next/image
- Bundle size için dynamic imports
- Memoization (useMemo, useCallback) gerektiğinde

## 🔧 PDF İşleme Kuralları

### PDF Sıkıştırma
```typescript
// pdf-lib kullanımı
import { PDFDocument } from 'pdf-lib';

const compressPDF = async (file: File, quality: number) => {
  const arrayBuffer = await file.arrayBuffer();
  const pdfDoc = await PDFDocument.load(arrayBuffer);
  
  // Compression logic
  const compressedBytes = await pdfDoc.save({
    useObjectStreams: false,
    objectsPerTick: 50,
  });
  
  return new Blob([compressedBytes], { type: 'application/pdf' });
};
```

### PDF Dönüştürme
```typescript
// PDF'yi sayfalara ayırma
import { PDFDocument, degrees, rgb } from 'pdf-lib';

const splitPDF = async (file: File): Promise<ConversionResult[]> => {
  const arrayBuffer = await file.arrayBuffer();
  const pdfDoc = await PDFDocument.load(arrayBuffer);
  const pages = pdfDoc.getPages();
  
  const results: ConversionResult[] = [];
  for (let i = 0; i < pages.length; i++) {
    const newDoc = await PDFDocument.create();
    const [copiedPage] = await newDoc.copyPages(pdfDoc, [i]);
    newDoc.addPage(copiedPage);
    
    const pdfBytes = await newDoc.save();
    results.push({
      name: file.name.replace('.pdf', `_sayfa_${i + 1}.pdf`),
      url: URL.createObjectURL(new Blob([pdfBytes])),
      size: pdfBytes.length,
      type: 'application/pdf'
    });
  }
  return results;
};

// PDF birleştirme
const mergePDFs = async (files: File[]): Promise<ConversionResult> => {
  const mergedDoc = await PDFDocument.create();
  
  for (const file of files) {
    const arrayBuffer = await file.arrayBuffer();
    const pdfDoc = await PDFDocument.load(arrayBuffer);
    const pages = await mergedDoc.copyPages(pdfDoc, pdfDoc.getPageIndices());
    pages.forEach(page => mergedDoc.addPage(page));
  }
  
  const pdfBytes = await mergedDoc.save();
  return {
    name: 'birlestirilmis_dokuman.pdf',
    url: URL.createObjectURL(new Blob([pdfBytes])),
    size: pdfBytes.length,
    type: 'application/pdf'
  };
};
```

### PDF Özellikleri
- Text extraction (OCR ready)
- Page splitting ve merging
- Watermark ekleme
- Page rotation
- Metadata editing
- PDF to Images conversion (PDF.js entegrasyonu)

### PDF to Images Dönüştürme
```typescript
// PDF.js ile PDF to Images conversion
import { convertPDFToImages } from '@/lib/pdfConvertUtils';

const convertToImages = async (file: File) => {
  try {
    // PDF.js dinamik import ile worker kurulumu
    const results = await convertPDFToImages(
      file, 
      'png',     // format: 'png' | 'jpeg'
      0.9,       // quality: 0.1-1.0
      2.0        // scale: render kalitesi
    );
    
    return results; // ConversionResult[]
  } catch (error) {
    console.error('PDF to Images error:', error);
    throw error;
  }
};
```

### PDF.js Entegrasyon Kuralları
- Dinamik import kullan: `await import('pdfjs-dist')`
- Worker LOCAL dosyadan yükle: `/js/pdf.worker.min.js` (CDN değil!)
- Canvas rendering için 2D context kullan
- Scale parametresi ile çözünürlük ayarla
- Error handling detaylı mesajlarla
- Worker dosyası `public/js/pdf.worker.min.js` olarak serve edilmeli
- **CRITICAL**: API ve Worker sürümlerinin eşleşmesi gerekli!
- ES module (.mjs) formatı destekli worker kullan
- Cache buster kullan: `?v=VERSION_NUMBER` - browser cache sorunlarını önler

### Dosya İşleme
- File validation (size, type)
- Progress tracking
- Memory optimization
- Error recovery
- Batch processing

## 🗄️ Firebase Storage Kuralları

### Firebase Storage Implementation
```typescript
// StorageUtils için temel yapı
import { 
  ref, 
  uploadBytes, 
  getDownloadURL, 
  deleteObject, 
  listAll,
  getMetadata
} from 'firebase/storage';
import { storage } from './firebase';

export class StorageUtils {
  static async uploadFile(
    userId: string,
    file: File,
    category: 'pdf' | 'image' | 'document' = 'pdf',
    customFileName?: string
  ): Promise<UploadResult> {
    const timestamp = Date.now();
    const fileName = customFileName || `${category}_${timestamp}_${file.name}`;
    const filePath = `users/${userId}/${category}/${fileName}`;
    
    const storageRef = ref(storage, filePath);
    const snapshot = await uploadBytes(storageRef, file);
    const downloadURL = await getDownloadURL(snapshot.ref);
    
    return { file: uploadedFile, downloadURL };
  }
}
```

### Storage Context Pattern
```typescript
// StorageContext kullanımı
const StorageContext = createContext<StorageContextType | null>(null);

export const StorageProvider: React.FC<StorageProviderProps> = ({ children }) => {
  const { user } = useAuth();
  const [files, setFiles] = useState<StorageFile[]>([]);
  const [quota, setQuota] = useState({ used: 0, limit: 5GB, percentage: 0 });
  
  const uploadFile = async (file: File, category?: string) => {
    const result = await StorageUtils.uploadFile(user.uid, file, category);
    await loadFiles(); // Refresh files list
    return result;
  };
  
  return (
    <StorageContext.Provider value={{ files, quota, uploadFile, deleteFile }}>
      {children}
    </StorageContext.Provider>
  );
};
```

### Security Rules
```javascript
// storage.rules - Firebase Storage güvenlik kuralları
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Kullanıcı kendi dosyalarına erişebilir
    match /users/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Temp uploads (anonymous users)
    match /temp/{allPaths=**} {
      allow read, write: if true;
    }
  }
}
```

### File Organization
```typescript
// Dosya organizasyon yapısı
users/
├── {userId}/
│   ├── pdf/
│   │   ├── pdf_1640995200000_document.pdf
│   │   └── pdf_1640995201000_compressed_file.pdf
│   ├── image/
│   │   ├── image_1640995202000_photo.jpg
│   │   └── image_1640995203000_converted.png
│   └── document/
│       ├── document_1640995204000_text.txt
│       └── document_1640995205000_word.docx
```

### Quota Management
```typescript
// Firebase Storage quota yönetimi (5GB free tier)
export const calculateUserQuota = async (userId: string) => {
  const files = await StorageUtils.listUserFiles(userId);
  const totalSize = files.reduce((sum, file) => sum + file.size, 0);
  const limit = 5 * 1024 * 1024 * 1024; // 5GB
  const percentage = (totalSize / limit) * 100;
  
  return { used: totalSize, limit, percentage };
};
```

### Auto Cleanup Strategy
```typescript
// 30 günlük otomatik cleanup
export const cleanupExpiredFiles = async (userId: string) => {
  const files = await StorageUtils.listUserFiles(userId);
  const thirtyDaysAgo = new Date(Date.now() - (30 * 24 * 60 * 60 * 1000));
  
  for (const file of files) {
    const fileDate = new Date(file.timeCreated);
    if (fileDate < thirtyDaysAgo) {
      await StorageUtils.deleteFile(userId, file.fullPath);
    }
  }
};
```

### Activity Tracking Integration
```typescript
// Activity tracking ile Firebase Storage entegrasyonu
await ActivityTracker.createActivity(user.uid, {
  type: 'pdf_compress',
  fileName: file.name,
  fileSize: originalSize,
  processedSize: compressedSize,
  status: 'success',
  category: 'PDF',
  downloadUrl: storageDownloadURL, // Firebase Storage URL
  processingTime,
  compressionRatio: savedPercentage
});
```

### Performance Best Practices
- **Client-side upload**: Doğrudan Firebase Storage'a upload
- **Paralel operasyonlar**: Multiple file operations
- **Metadata optimization**: Custom metadata for categorization
- **Lazy loading**: File list pagination
- **Cache management**: Browser cache ile performance

## 🎯 UI/UX Kuralları

### Accessibility
- ARIA labels kullan
- Keyboard navigation desteği
- Screen reader friendly
- Color contrast ratios

### Responsive Design
- Mobile-first approach
- Touch-friendly interfaces
- Proper spacing (p-4, m-2, etc.)
- Flexible layouts (flex, grid)

### Color Usage Rules (KRİTİK KURAL)
- **AÇIK GRİ RENKLERDE KULLANMA**: `text-gray-500`, `text-gray-600` gibi açık gri renkler okunabilirlik sorunu yaratır
- **KOYU RENKLER KULLAN**: `text-gray-700`, `text-gray-800`, `text-gray-900` gibi daha koyu renkler tercih et
- **KONTRAS ORANI**: Her zaman yeterli kontrast oranı sağla (minimum WCAG AA standardı)
- **ACCESSIBILITY**: Renk seçimlerinde görme engelli kullanıcıları da düşün

### Modern Form Design
```typescript
// Enhanced form input styling
.form-input {
  @apply w-full px-4 py-3 border border-gray-300 rounded-lg;
  @apply focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent;
  @apply text-gray-900 placeholder-gray-500 bg-white;
  @apply transition-all duration-200;
}

// Form field structure
<div>
  <label htmlFor="field" className="block text-sm font-medium text-gray-700 mb-2">
    Field Label *
  </label>
  <input
    type="text"
    id="field"
    className="form-input"
    placeholder="Placeholder text"
    required
  />
</div>
```

### Authentication Form Guidelines
```typescript
// Ad/Soyad alanları ayrı ayrı
const [firstName, setFirstName] = useState('');
const [lastName, setLastName] = useState('');

// Şifre görünürlük toggle
const [showPassword, setShowPassword] = useState(false);

// Firebase'de ayrı ayrı kaydetme
await setDoc(doc(firestore, 'users', user.uid), {
  firstName,
  lastName,
  email,
  createdAt: new Date(),
  updatedAt: new Date()
});
```

### Animation & Transitions
```css
/* Custom animations in globals.css */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes slideIn {
  from { opacity: 0; transform: translateX(-20px); }
  to { opacity: 1; transform: translateX(0); }
}

@keyframes bounceIn {
  0% { opacity: 0; transform: scale(0.3); }
  50% { opacity: 1; transform: scale(1.05); }
  70% { transform: scale(0.9); }
  100% { opacity: 1; transform: scale(1); }
}

/* Usage classes */
.animate-fade-in { animation: fadeIn 0.5s ease-out; }
.animate-slide-in { animation: slideIn 0.6s ease-out; }
.animate-bounce-in { animation: bounceIn 0.6s ease-out; }
```

### Component Hover Effects
```typescript
// Modern card hover effects
<div className="relative bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-xl transition-all duration-300 hover:border-blue-300 group-hover:scale-105 overflow-hidden">
  {/* Hover gradient background */}
  <div className="absolute inset-0 bg-gradient-to-br from-blue-50/50 to-purple-50/50 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
  
  {/* Content with z-index */}
  <div className="relative z-10">
    {/* Content here */}
  </div>
</div>
```

### Button Design System
```css
/* Primary button */
.btn-primary {
  @apply bg-gradient-to-r from-blue-600 to-blue-700 text-white;
  @apply px-6 py-3 rounded-lg font-medium;
  @apply hover:from-blue-700 hover:to-blue-800;
  @apply transition-all duration-200 shadow-lg hover:shadow-xl;
  @apply disabled:opacity-50 disabled:cursor-not-allowed;
}

/* Loading state */
{loading ? (
  <div className="flex items-center justify-center">
    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white">
      {/* Spinner SVG */}
    </svg>
    Yükleniyor...
  </div>
) : (
  'Button Text'
)}
```

### File Upload Experience
```typescript
// Enhanced drag & drop with visual feedback
const [isHovering, setIsHovering] = useState(false);

// Dropzone configuration
const { getRootProps, getInputProps, isDragActive } = useDropzone({
  onDrop,
  onDragEnter: () => setIsHovering(true),
  onDragLeave: () => setIsHovering(false),
  onDropAccepted: () => setIsHovering(false),
  onDropRejected: () => setIsHovering(false)
});

// Dynamic styling based on state
className={`relative border-2 border-dashed rounded-xl p-8 text-center cursor-pointer transition-all duration-300 ${
  isDragActive || isHovering
    ? 'border-blue-500 bg-blue-50 scale-105'
    : 'border-gray-300 hover:border-gray-400 hover:bg-gray-50'
}`}
```

### Loading States
```typescript
const [isLoading, setIsLoading] = useState(false);

// Enhanced loading UI with animations
{isLoading ? (
  <div className="flex items-center justify-center p-8">
    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
  </div>
) : (
  <ContentComponent />
)}
```

### User Profile Display
```typescript
// User avatar with initials
const getUserInitials = () => {
  if (userProfile) {
    return `${userProfile.firstName.charAt(0)}${userProfile.lastName.charAt(0)}`.toUpperCase();
  }
  return 'K';
};

// Profile dropdown menu
<div className="relative" ref={userMenuRef}>
  <button className="flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-50 transition-colors">
    <div className="w-8 h-8 bg-gradient-to-br from-blue-600 to-purple-700 rounded-full flex items-center justify-center">
      <span className="text-white font-medium text-sm">
        {getUserInitials()}
      </span>
    </div>
    {/* User info */}
  </button>
</div>
```

### Progressive Enhancement
- Staggered animations for list items
- Scroll-triggered animations
- Hover state feedback
- Loading skeleton states
- Error state handling with icons
- Success state confirmations

### Mobile Optimization
- Touch-friendly 44px+ targets
- Swipe gestures support
- Haptic feedback indicators
- Orientation-aware layouts
- Performance-optimized animations

### Payment Methods Integration
```typescript
// İyzico ve diğer ödeme logolarının entegrasyonu
// public/images/payment-methods/ klasöründe logo dosyaları
// Tüm logolar 120x38 px boyutlarında standardize edilmiş

// Pricing sayfasında payment methods gösterimi
<div className="flex flex-wrap justify-center items-center gap-6">
  {/* Visa */}
  <div className="bg-white border border-gray-200 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow">
    <Image 
      src="/images/payment-methods/visa.svg" 
      alt="Visa"
      width={120}
      height={38}
      className="h-9 w-auto"
    />
  </div>

  {/* MasterCard */}
  <div className="bg-white border border-gray-200 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow">
    <Image 
      src="/images/payment-methods/mastercard.svg" 
      alt="MasterCard"
      width={120}
      height={38}
      className="h-9 w-auto"
    />
  </div>

  {/* İyzico */}
  <div className="bg-white border border-gray-200 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow">
    <Image 
      src="/images/payment-methods/iyzico.svg" 
      alt="İyzico ile Öde"
      width={120}
      height={38}
      className="h-9 w-auto"
    />
  </div>
</div>
```

### İyzico Logo Pack Integration
- **Logo Klasörü**: `iyzico-logo-pack/` (Türkçe ve İngilizce versiyonları mevcut)
- **Checkout Versiyonu**: `checkout_iyzico_ile_ode/TR/Tr_Colored_Horizontal/`
- **Footer Versiyonu**: `footer_iyzico_ile_ode/Colored/`
- **Format Desteği**: SVG, PNG, PDF formatları mevcut
- **Boyut Standardı**: Tüm ödeme logoları 120x38 px boyutlarında uyumlu
- **Responsive Design**: Mobil ve desktop uyumlu görünüm

### Payment Security Display
```typescript
// SSL ve güvenlik rozetleri
<div className="flex items-center bg-green-600 rounded-lg px-4 py-3 text-white shadow-sm hover:shadow-md transition-shadow">
  <svg className="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
  </svg>
  <span className="font-medium">SSL Güvenli</span>
</div>

// Güvenlik detayları
<p className="text-sm text-gray-500">
  256-bit SSL şifrelemesi • 3D Secure doğrulama • PCI DSS uyumluluğu
</p>
```

### İyzico Application Compliance
- **Kurumsal Bilgiler**: Hakkımızda sayfasında tam şirket bilgileri
- **Yasal Sayfalar**: Gizlilik Sözleşmesi, Teslimat-İade, Mesafeli Satış Sözleşmesi
- **KVKK Uyumluluğu**: Detaylı veri işleme ve kullanıcı hakları
- **SSL Sertifikası**: 256-bit şifreleme ve güvenlik gösterimi
- **Professional Layout**: İyzico onay standartlarına uygun tasarım

## 🔐 Güvenlik Kuralları

### Firebase Security
- Authentication required routes
- Firestore security rules
- File upload validation
- Rate limiting

### Data Validation
- Input sanitization
- File type validation
- Size limits
- XSS prevention

## 📊 Performance Kuralları

### Code Splitting
```typescript
// Dynamic imports
const AdminPanel = dynamic(() => import('@/components/AdminPanel'), {
  loading: () => <div>Loading...</div>,
});
```

### Optimization
- Image optimization
- Font optimization
- CSS purging
- JavaScript minification

## 🧪 Test Kuralları

### Unit Testing
- Component testing
- Utility function testing
- Hook testing
- Mock external dependencies

### Integration Testing
- API endpoint testing
- User flow testing
- Firebase integration testing

## 📝 Dokümantasyon Kuralları

### Code Comments
```typescript
/**
 * PDF sıkıştırma fonksiyonu
 * @param file - Sıkıştırılacak PDF dosyası
 * @param quality - Sıkıştırma kalitesi (0-1)
 * @returns Sıkıştırılmış PDF Blob
 */
const compressPDF = async (file: File, quality: number): Promise<Blob> => {
  // Implementation
};
```

### README Updates
- Feature açıklamaları
- Setup instructions
- API documentation
- Deployment guide

## 🚀 Deployment Kuralları

### Build Process
- Type checking
- ESLint validation
- Build optimization
- Environment variables

### Firebase Deployment
```json
{
  "hosting": {
    "public": "out",
    "ignore": ["firebase.json", "**/.*", "**/node_modules/**"],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ]
  }
}
```

### GitHub Actions CI/CD
```yaml
# .github/workflows/deploy.yml
name: Deploy to Firebase

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
        
    - name: Build project
      run: npm run build
      env:
        NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
        # ... other Firebase config secrets
        
    - name: Deploy to Firebase
      run: firebase deploy --token ${{ secrets.FIREBASE_TOKEN }} --force
```

### CI/CD Best Practices
- **Clean Workflows**: Remove deprecated steps (Firebase Functions)
- **Environment Variables**: Use GitHub Secrets for sensitive data
- **Build Optimization**: Cache node_modules for faster builds
- **Error Handling**: Clear error messages and debugging info
- **Force Deploy**: Use `--force` flag for consistent deployments
- **Node.js Version**: Use latest stable version (22.x)

### Troubleshooting GitHub Actions
- **Missing Dependencies**: Check if all required folders exist
- **Environment Secrets**: Verify all secrets are properly configured
- **Build Failures**: Review ESLint and TypeScript errors
- **Firebase Token**: Ensure FIREBASE_TOKEN is valid and has proper permissions

## 🔍 Debugging Kuralları

### Console Logging
```typescript
// Development only
if (process.env.NODE_ENV === 'development') {
  console.log('Debug info:', data);
}
```

### Error Tracking
- Structured error logging
- User action tracking
- Performance monitoring
- Firebase Analytics

## 📱 Mobile Kuralları

### Touch Interactions
- Minimum 44px touch targets
- Swipe gestures
- Haptic feedback
- Orientation support

### Performance
- Lazy loading
- Image optimization
- Reduced animations
- Efficient rendering

## 🔍 SEO Kuralları

### Structured Data (Schema.org)
```typescript
// JSON-LD structured data kullan
import StructuredData from '@/components/StructuredData';

// WebSite, WebApplication, HowTo, FAQ schemas
<StructuredData type="website" />
<StructuredData type="howto" data={{ title: "...", steps: [...] }} />
```

### Meta Tags Optimization
```typescript
// Sayfa özelinde meta tags
import { generatePageMetadata, getPageSEOData } from '@/lib/seoUtils';

export const metadata = generatePageMetadata(getPageSEOData('page-name'));
```

### Header Hierarchy
- **H1**: Tek ve benzersiz sayfa başlığı
- **H2**: Ana bölüm başlıkları
- **H3**: Alt bölüm başlıkları
- Logical hierarchy: H1 > H2 > H3 sırası

### Image SEO
```typescript
// Context-aware alt text
<Image 
  alt={generateImageAlt('pdf-compress', 'Dosya yükleme alanı')}
  loading="lazy"
  sizes="(max-width: 768px) 100vw, 50vw"
/>
```

### Breadcrumbs
```typescript
// Auto-generated breadcrumbs
import Breadcrumb from '@/components/Breadcrumb';
<Breadcrumb /> // pathname bazlı otomatik
```

### Performance SEO
- **Core Web Vitals**: LCP, FID, CLS optimize et
- **Bundle splitting**: Vendor chunks ayrı
- **Dynamic imports**: Non-critical components lazy load
- **Compression**: gzip/brotli aktif

## 🎨 Design System

### Color Palette
```css
/* Primary colors */
--primary-50: #eff6ff;
--primary-500: #3b82f6;
--primary-900: #1e3a8a;

/* Semantic colors */
--success: #10b981;
--warning: #f59e0b;
--error: #ef4444;
```

### Typography
```css
/* Headings */
.heading-1 { @apply text-4xl font-bold; }
.heading-2 { @apply text-3xl font-semibold; }
.heading-3 { @apply text-2xl font-semibold; }

/* Body text */
.body-lg { @apply text-lg; }
.body-sm { @apply text-sm; }
```

## 🔄 Git Kuralları

### Commit Messages
```
feat: PDF compression algorithm improvement [NOTION-123]
fix: Turkish language support bug [NOTION-124]
ui: responsive design optimization [NOTION-125]
docs: update API documentation
test: add unit tests for PDF utils
```

### Branch Naming
```
feature/pdf-compression-improvement
bugfix/turkish-language-support
ui/responsive-design-optimization
hotfix/critical-security-patch
```

## 📊 Analytics & Monitoring

### Firebase Analytics
- User engagement tracking
- Feature usage metrics
- Performance monitoring
- Error tracking

### Custom Events
```typescript
import { analytics } from '@/lib/firebase';
import { logEvent } from 'firebase/analytics';

// Track user actions
logEvent(analytics, 'pdf_compressed', {
  file_size: fileSize,
  compression_ratio: ratio,
  processing_time: time
});
```

## 🎯 Öncelik Sırası

1. **Güvenlik**: Input validation, authentication
2. **Performance**: Loading times, optimization, Core Web Vitals
3. **Accessibility**: WCAG compliance, ARIA labels, semantic HTML
4. **User Experience**: Intuitive interface
5. **Mobile Experience**: Touch-friendly design
6. **SEO**: Meta tags, structured data, rich snippets, breadcrumbs, header hierarchy
7. **Analytics**: User behavior tracking
8. **Testing**: Unit & integration tests

## 🗂️ Cache Management Kuralları

### Browser Cache Strategy
```typescript
// Firebase hosting cache headers
{
  "source": "**/*.@(js|css)",
  "headers": [
    {
      "key": "Cache-Control",
      "value": "public, max-age=31536000, immutable"
    }
  ]
}
```

### Service Worker Implementation
```typescript
// Service worker for cache invalidation
const CACHE_NAME = `quickutil-cache-${Date.now()}`;

// Cache busting strategy
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => cache.addAll(STATIC_ASSETS))
  );
  self.skipWaiting();
});
```

### Cache Busting Techniques
- **Build ID**: Unique timestamp-based build IDs
- **Asset Versioning**: Automatic file hash generation
- **Service Worker**: Cache invalidation on updates
- **HTTP Headers**: Proper cache control headers

### Next.js Cache Configuration
```typescript
// next.config.ts optimizations
export default {
  generateBuildId: async () => {
    return `build-${Date.now()}-${Math.random().toString(36).substring(2, 8)}`;
  },
  
  experimental: {
    optimizeCss: true,
    optimizeServerReact: true,
  }
};
```

### Cache Management Tools
```typescript
// CacheManager component for manual cache clearing
const clearAllCaches = async () => {
  // Clear browser cache
  const cacheNames = await caches.keys();
  await Promise.all(cacheNames.map(name => caches.delete(name)));
  
  // Clear service worker cache
  navigator.serviceWorker.controller?.postMessage({ type: 'CACHE_UPDATE' });
  
  // Reload page
  window.location.reload();
};
```

### Deployment Cache Strategy
```bash
# NPM Scripts for cache management
"deploy:fresh": "npm run build && firebase deploy --force"
"cache:clear": "rm -rf .next && rm -rf out && npm run build"
"version:bump": "npm version patch && git push origin main --tags"
```

### Cache Invalidation Rules
1. **Static Assets**: Long-term cache (1 year) with immutable flag
2. **HTML Files**: No cache, always revalidate
3. **API Responses**: Short-term cache with proper ETags
4. **Service Worker**: Automatic cache clearing on updates
5. **Manual Override**: CacheManager component for force refresh

### User Experience
- **Auto-update notifications**: Service worker update prompts
- **Manual cache clearing**: Development tools in header
- **Progressive enhancement**: Graceful fallback for cache failures
- **Loading states**: Clear feedback during cache operations

## 📧 Email Verification Kuralları

### Resend API Integration
```typescript
// Firebase Functions ile Resend kullanımı
const { Resend } = require('resend');
const resend = new Resend(RESEND_API_KEY);

const result = await resend.emails.send({
  from: 'QuickUtil Team <noreply@quickutil.app>',
  to: [email],
  subject: '✨ QuickUtil Hesabınızı Doğrulayın',
  html: htmlTemplate,
  text: textVersion,
  tags: [{ name: 'category', value: 'email_verification' }]
});
```

### Email Template Guidelines
- **Professional Design**: QuickUtil branding ile tutarlı
- **Responsive**: Mobil ve desktop uyumlu
- **Accessible**: Yüksek kontrastlı renkler, semantic HTML
- **Modern Animations**: Gradients, shadows, hover effects
- **CTA Buttons**: Belirgin ve erişilebilir aksiyon butonları
- **Security Notice**: Güvenlik uyarıları ve süre bildirimi

### Domain Authentication (Gerekli)
```dns
# SPF Record
quickutil.app TXT "v=spf1 include:_spf.resend.com ~all"

# DKIM Record (Resend vereceği)
re._domainkey.quickutil.app TXT "p=MIGfMA0GCSqGSI..."

# DMARC Record
_dmarc.quickutil.app TXT "v=DMARC1; p=quarantine;"
```

### Firebase Functions Structure
```
functions/
├── index.js              # Email functions
├── package.json          # Resend dependency
└── .eslintrc.js          # ESLint config
```

### AuthContext Email Flow
```typescript
const register = async (email, password, firstName, lastName) => {
  // 1. Create user with Firebase Auth
  const { user } = await createUserWithEmailAndPassword(auth, email, password);
  
  // 2. Save profile to Firestore
  await setDoc(doc(firestore, 'users', user.uid), {
    firstName, lastName, email, emailVerified: false
  });
  
  // 3. Send verification email via Firebase Function
  const sendEmail = httpsCallable(functions, 'sendVerificationEmail');
  await sendEmail({ email, firstName, lastName, verificationLink });
};
```

### Verification Page (/verify-email)
- **Suspense Boundary**: useSearchParams() için gerekli
- **Loading States**: Spinner ve progress indicators
- **Success/Error States**: Clear feedback ve next steps
- **Resend Functionality**: Rate limiting ile email tekrar gönderme

### Email Verification Security
- **24 saat TTL**: Verification links expire
- **One-time use**: Bağlantılar tek kullanımlık
- **UID validation**: User identity verification
- **Firestore update**: emailVerified flag'i güncelle

## 📝 Notlar

- Her yeni özellik için Notion'da task oluştur
- Code review için pull request kullan
- Documentation'ı güncel tut
- Performance metrics'leri izle
- User feedback'i toplam ve değerlendir
- Cache management değişikliklerini test et
- Email deliverability'yi izle (Resend dashboard)
- **Cart System**: E-commerce best practices uygula
- **Special Offers**: Pricing intelligence ve conversion optimization

## 🏗️ İyzico Abonelik Yönetim Sistemi Kuralları

### İyzico API Integration Pattern
```typescript
// İyzico API wrapper class structure
export class IyzicoService {
  private readonly apiKey: string;
  private readonly secretKey: string;
  private readonly baseURL: string;
  
  constructor() {
    this.apiKey = process.env.IYZICO_API_KEY!;
    this.secretKey = process.env.IYZICO_SECRET_KEY!;
    this.baseURL = process.env.NODE_ENV === 'production' 
      ? 'https://api.iyzipay.com' 
      : 'https://sandbox-api.iyzipay.com';
  }
  
  // Subscription product creation
  async createSubscriptionProduct(productData: SubscriptionProduct): Promise<IyzicoResponse> {
    // Implementation
  }
  
  // Subscription plan management
  async createSubscriptionPlan(planData: SubscriptionPlan): Promise<IyzicoResponse> {
    // Implementation
  }
  
  // Customer management
  async createCustomer(customerData: CustomerData): Promise<IyzicoResponse> {
    // Implementation
  }
  
  // Card tokenization (secure card storage)
  async saveCard(cardData: CardData, customerId: string): Promise<IyzicoResponse> {
    // Implementation
  }
  
  // Subscription lifecycle
  async createSubscription(subscriptionData: CreateSubscriptionData): Promise<IyzicoResponse> {
    // Implementation
  }
  
  async cancelSubscription(subscriptionId: string): Promise<IyzicoResponse> {
    // Implementation
  }
  
  async pauseSubscription(subscriptionId: string): Promise<IyzicoResponse> {
    // Implementation
  }
  
  async resumeSubscription(subscriptionId: string): Promise<IyzicoResponse> {
    // Implementation
  }
}
```

### Profile Page Subscription Management
```typescript
// Subscription management interface
interface Subscription {
  id: string;
  planName: string;
  status: 'active' | 'cancelled' | 'paused' | 'past_due';
  price: number;
  currency: string;
  billingPeriod: 'monthly' | 'annual';
  currentPeriodStart: Date;
  currentPeriodEnd: Date;
  cancelAtPeriodEnd: boolean;
  features: string[];
  iyzicoSubscriptionId?: string; // İyzico subscription reference
}

// Payment method interface
interface PaymentMethod {
  id: string;
  type: 'card' | 'bank_transfer';
  brand?: 'visa' | 'mastercard' | 'amex';
  last4?: string;
  expiryMonth?: number;
  expiryYear?: number;
  holderName: string;
  isDefault: boolean;
  createdAt: Date;
  iyzicoCardToken?: string; // İyzico card token reference
}

// Invoice interface
interface Invoice {
  id: string;
  number: string;
  amount: number;
  currency: string;
  status: 'paid' | 'pending' | 'failed';
  dueDate: Date;
  paidAt?: Date;
  description: string;
  downloadUrl?: string;
  iyzicoPaymentId?: string; // İyzico payment reference
}
```

### Profile Page Structure Requirements
```typescript
// Tab-based navigation system
const profileTabs = [
  { id: 'overview', name: 'Genel Bakış', icon: UserIcon },
  { id: 'files', name: 'Dosyalarım', icon: DocumentIcon },
  { id: 'billing', name: 'Faturalama', icon: BanknotesIcon },
  { id: 'payment-methods', name: 'Ödeme Yöntemleri', icon: CreditCardIcon },
  { id: 'settings', name: 'Ayarlar', icon: CogIcon }
];

// Billing tab implementation rules
const billingTabFeatures = [
  'Current subscription display with plan details',
  'Subscription status badges (Active/Cancelled/Paused/Past Due)',
  'Next billing date and amount information',
  'Plan features and usage limits',
  'Subscription management actions (Cancel/Pause/Resume/Change Plan)',
  'Billing history with invoice downloads',
  'Usage statistics and quota monitoring'
];

// Payment methods tab implementation rules
const paymentMethodsTabFeatures = [
  'Add new payment method with İyzico secure forms',
  'Display existing cards with masked numbers',
  'Set default payment method functionality',
  'Delete payment methods with confirmation',
  'Card brand logos (Visa/MasterCard) with proper styling',
  'Expiry date validation and warnings',
  'PCI DSS compliance indicators'
];
```

### Subscription Lifecycle Management
```typescript
// Subscription management functions
const subscriptionManagement = {
  // Cancel subscription
  cancelSubscription: async (subscriptionId: string) => {
    try {
      // 1. Call İyzico API to cancel subscription
      const response = await IyzicoService.cancelSubscription(subscriptionId);
      
      // 2. Update Firestore subscription status
      await updateDoc(doc(firestore, 'subscriptions', subscriptionId), {
        status: 'cancelled',
        cancelledAt: new Date(),
        cancelAtPeriodEnd: true
      });
      
      // 3. Log activity
      await ActivityTracker.createActivity(userId, {
        type: 'subscription_cancelled',
        subscriptionId,
        planName: subscription.planName
      });
      
      return { success: true, data: response };
    } catch (error) {
      console.error('Cancel subscription error:', error);
      throw error;
    }
  },
  
  // Pause subscription
  pauseSubscription: async (subscriptionId: string) => {
    // Similar implementation pattern
  },
  
  // Resume subscription
  resumeSubscription: async (subscriptionId: string) => {
    // Similar implementation pattern
  },
  
  // Change subscription plan
  changePlan: async (subscriptionId: string, newPlanId: string) => {
    // Implementation with prorating logic
  }
};
```

### Payment Methods Management
```typescript
// Payment method management functions
const paymentMethodManagement = {
  // Add new payment method
  addPaymentMethod: async (cardData: CardFormData) => {
    try {
      // 1. Validate card data
      const validation = validateCardData(cardData);
      if (!validation.isValid) throw new Error(validation.errors.join(', '));
      
      // 2. Tokenize card with İyzico
      const tokenResponse = await IyzicoService.saveCard(cardData, user.iyzicoCustomerId);
      
      // 3. Save payment method to Firestore
      const paymentMethod: PaymentMethod = {
        id: generateId(),
        type: 'card',
        brand: detectCardBrand(cardData.cardNumber),
        last4: cardData.cardNumber.slice(-4),
        expiryMonth: cardData.expiryMonth,
        expiryYear: cardData.expiryYear,
        holderName: cardData.holderName,
        isDefault: paymentMethods.length === 0, // First card is default
        createdAt: new Date(),
        iyzicoCardToken: tokenResponse.cardToken
      };
      
      await addDoc(collection(firestore, 'users', user.uid, 'paymentMethods'), paymentMethod);
      
      return { success: true, data: paymentMethod };
    } catch (error) {
      console.error('Add payment method error:', error);
      throw error;
    }
  },
  
  // Set default payment method
  setDefaultPaymentMethod: async (paymentMethodId: string) => {
    // Implementation
  },
  
  // Delete payment method
  deletePaymentMethod: async (paymentMethodId: string) => {
    // Implementation with İyzico card deletion
  }
};
```

### UI/UX Design Patterns for Subscription Management

### Status Badge System
```typescript
// Status badge styling rules
const getStatusBadge = (status: Subscription['status']) => {
  const statusConfig = {
    active: {
      bg: 'bg-green-100',
      text: 'text-green-800',
      label: 'Aktif',
      icon: CheckCircleIcon
    },
    cancelled: {
      bg: 'bg-red-100',
      text: 'text-red-800',
      label: 'İptal Edildi',
      icon: XCircleIcon
    },
    paused: {
      bg: 'bg-yellow-100',
      text: 'text-yellow-800',
      label: 'Durduruldu',
      icon: PauseCircleIcon
    },
    past_due: {
      bg: 'bg-red-100',
      text: 'text-red-800',
      label: 'Vadesi Geçmiş',
      icon: ExclamationTriangleIcon
    }
  };
  
  return statusConfig[status];
};
```

### Action Button System
```typescript
// Subscription action buttons with proper states
const SubscriptionActions = ({ subscription }: { subscription: Subscription }) => {
  const [loading, setLoading] = useState<string | null>(null);
  
  const actions = {
    active: [
      { id: 'pause', label: 'Duraklat', icon: PauseCircleIcon, color: 'yellow' },
      { id: 'cancel', label: 'İptal Et', icon: XCircleIcon, color: 'red' },
      { id: 'change', label: 'Plan Değiştir', icon: ArrowPathIcon, color: 'blue' }
    ],
    paused: [
      { id: 'resume', label: 'Yeniden Başlat', icon: ArrowPathIcon, color: 'green' },
      { id: 'cancel', label: 'İptal Et', icon: XCircleIcon, color: 'red' }
    ],
    cancelled: [
      { id: 'reactivate', label: 'Yeniden Aktifleştir', icon: CheckCircleIcon, color: 'green' }
    ]
  };
  
  return (
    <div className="flex flex-wrap gap-3">
      {actions[subscription.status]?.map(action => (
        <button
          key={action.id}
          onClick={() => handleAction(action.id)}
          disabled={loading === action.id}
          className={`btn-${action.color} flex items-center space-x-2`}
        >
          <action.icon className="h-4 w-4" />
          <span>{loading === action.id ? 'Yükleniyor...' : action.label}</span>
        </button>
      ))}
    </div>
  );
};
```

### Payment Method Cards Design
```typescript
// Payment method card component
const PaymentMethodCard = ({ paymentMethod, onSetDefault, onDelete }: PaymentMethodCardProps) => {
  const cardBrandIcon = {
    visa: '/images/payment-methods/visa.svg',
    mastercard: '/images/payment-methods/mastercard.svg',
    amex: '/images/payment-methods/amex.svg'
  };
  
  return (
    <div className={`border rounded-xl p-6 transition-all duration-200 ${
      paymentMethod.isDefault 
        ? 'border-blue-500 bg-blue-50' 
        : 'border-gray-200 hover:border-gray-300'
    }`}>
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-3">
          <Image
            src={cardBrandIcon[paymentMethod.brand]}
            alt={paymentMethod.brand}
            width={40}
            height={25}
            className="rounded"
          />
          <div>
            <p className="font-medium text-gray-900">
              •••• •••• •••• {paymentMethod.last4}
            </p>
            <p className="text-sm text-gray-500">
              {paymentMethod.expiryMonth}/{paymentMethod.expiryYear}
            </p>
          </div>
        </div>
        
        {paymentMethod.isDefault && (
          <span className="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded">
            Varsayılan
          </span>
        )}
      </div>
      
      <div className="flex space-x-3">
        {!paymentMethod.isDefault && (
          <button
            onClick={() => onSetDefault(paymentMethod.id)}
            className="btn-secondary-sm"
          >
            Varsayılan Yap
          </button>
        )}
        <button
          onClick={() => onDelete(paymentMethod.id)}
          className="btn-danger-sm"
        >
          <TrashIcon className="h-4 w-4" />
        </button>
      </div>
    </div>
  );
};
```

### Billing History Component
```typescript
// Invoice history table with download functionality
const BillingHistory = ({ invoices }: { invoices: Invoice[] }) => {
  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
      <h3 className="text-lg font-semibold text-gray-900 mb-6">Fatura Geçmişi</h3>
      
      <div className="space-y-4">
        {invoices.map(invoice => (
          <div key={invoice.id} className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
            <div className="flex items-center space-x-4">
              <DocumentTextIcon className="h-8 w-8 text-gray-400" />
              <div>
                <p className="font-medium text-gray-900">Fatura #{invoice.number}</p>
                <p className="text-sm text-gray-500">
                  {format(invoice.dueDate, 'dd MMM yyyy')} • {formatUSDPrice(invoice.amount)}
                </p>
              </div>
            </div>
            
            <div className="flex items-center space-x-3">
              <span className={`px-2.5 py-0.5 rounded text-xs font-medium ${
                invoice.status === 'paid' 
                  ? 'bg-green-100 text-green-800' 
                  : invoice.status === 'pending'
                  ? 'bg-yellow-100 text-yellow-800'
                  : 'bg-red-100 text-red-800'
              }`}>
                {invoice.status === 'paid' ? 'Ödendi' : 
                 invoice.status === 'pending' ? 'Bekliyor' : 'Başarısız'}
              </span>
              
              {invoice.downloadUrl && (
                <a
                  href={invoice.downloadUrl}
                  download
                  className="btn-secondary-sm"
                >
                  İndir
                </a>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};
```

### Security & Compliance Rules

### İyzico Integration Security
```typescript
// Security best practices for İyzico integration
const securityRules = {
  // API key management
  apiKeyHandling: [
    'Store API keys in environment variables only',
    'Never expose secret keys to client-side code',
    'Use different keys for sandbox and production',
    'Implement key rotation strategy'
  ],
  
  // Data encryption
  dataEncryption: [
    'All card data must be tokenized via İyzico',
    'Never store raw card numbers in database',
    'Use HTTPS for all API communications',
    'Implement request signing for API calls'
  ],
  
  // PCI DSS compliance
  pciCompliance: [
    'Display PCI DSS compliance badges',
    'Implement secure card data handling',
    'Regular security audits and updates',
    'Secure data transmission protocols'
  ]
};
```

### Error Handling & User Feedback
```typescript
// Comprehensive error handling for subscription operations
const errorHandling = {
  // İyzico API error mapping
  mapIyzicoError: (error: IyzicoError) => {
    const errorMap = {
      'INVALID_CARD_NUMBER': 'Geçersiz kart numarası',
      'EXPIRED_CARD': 'Kartın süresi dolmuş',
      'INSUFFICIENT_FUNDS': 'Yetersiz bakiye',
      'SUBSCRIPTION_NOT_FOUND': 'Abonelik bulunamadı',
      'CUSTOMER_NOT_FOUND': 'Müşteri bulunamadı'
    };
    
    return errorMap[error.code] || 'Bir hata oluştu. Lütfen tekrar deneyin.';
  },
  
  // User-friendly error display
  showError: (message: string) => {
    toast.error(message, {
      duration: 5000,
      position: 'top-right',
      style: {
        background: '#FEE2E2',
        color: '#DC2626',
        border: '1px solid #FECACA'
      }
    });
  },
  
  // Success feedback
  showSuccess: (message: string) => {
    toast.success(message, {
      duration: 3000,
      position: 'top-right',
      style: {
        background: '#D1FAE5',
        color: '#059669',
        border: '1px solid #A7F3D0'
      }
    });
  }
};
```

### Performance & Analytics

### Subscription Analytics Integration
```typescript
// Track subscription-related events
const subscriptionAnalytics = {
  trackSubscriptionCreated: (planName: string, amount: number) => {
    logEvent(analytics, 'subscription_created', {
      plan_name: planName,
      amount,
      currency: 'USD'
    });
  },
  
  trackSubscriptionCancelled: (planName: string, reason?: string) => {
    logEvent(analytics, 'subscription_cancelled', {
      plan_name: planName,
      cancellation_reason: reason
    });
  },
  
  trackPaymentMethodAdded: (cardBrand: string) => {
    logEvent(analytics, 'payment_method_added', {
      card_brand: cardBrand,
      method_type: 'card'
    });
  },
  
  trackPlanUpgrade: (fromPlan: string, toPlan: string) => {
    logEvent(analytics, 'plan_upgraded', {
      from_plan: fromPlan,
      to_plan: toPlan
    });
  }
};
```

### Caching Strategy for Subscription Data
```typescript
// Efficient data caching for subscription information
const subscriptionCache = {
  // Cache subscription data with 5-minute TTL
  cacheSubscription: (userId: string, subscription: Subscription) => {
    const cacheKey = `subscription_${userId}`;
    const cacheData = {
      data: subscription,
      timestamp: Date.now(),
      ttl: 5 * 60 * 1000 // 5 minutes
    };
    localStorage.setItem(cacheKey, JSON.stringify(cacheData));
  },
  
  // Retrieve cached subscription with TTL check
  getCachedSubscription: (userId: string): Subscription | null => {
    const cacheKey = `subscription_${userId}`;
    const cached = localStorage.getItem(cacheKey);
    
    if (!cached) return null;
    
    const { data, timestamp, ttl } = JSON.parse(cached);
    if (Date.now() - timestamp > ttl) {
      localStorage.removeItem(cacheKey);
      return null;
    }
    
    return data;
  }
};
```

### Testing Requirements

### Subscription Management Testing
```typescript
// Unit tests for subscription operations
describe('Subscription Management', () => {
  test('should cancel subscription successfully', async () => {
    const mockSubscription = createMockSubscription();
    const result = await subscriptionManagement.cancelSubscription(mockSubscription.id);
    
    expect(result.success).toBe(true);
    expect(mockSubscription.status).toBe('cancelled');
  });
  
  test('should handle payment method addition', async () => {
    const mockCardData = createMockCardData();
    const result = await paymentMethodManagement.addPaymentMethod(mockCardData);
    
    expect(result.success).toBe(true);
    expect(result.data.last4).toBe(mockCardData.cardNumber.slice(-4));
  });
  
  test('should validate card expiry date', () => {
    const expiredCard = { expiryMonth: 12, expiryYear: 2020 };
    const validation = validateCardData(expiredCard);
    
    expect(validation.isValid).toBe(false);
    expect(validation.errors).toContain('Kartın süresi dolmuş');
  });
});
```

### Integration Testing with İyzico Sandbox
```typescript
// Integration tests with İyzico sandbox environment
describe('İyzico Integration', () => {
  beforeAll(() => {
    // Setup sandbox environment
    process.env.NODE_ENV = 'test';
    process.env.IYZICO_API_KEY = 'sandbox_test_key';
    process.env.IYZICO_SECRET_KEY = 'sandbox_test_secret';
  });
  
  test('should create subscription product', async () => {
    const productData = createTestSubscriptionProduct();
    const response = await IyzicoService.createSubscriptionProduct(productData);
    
    expect(response.status).toBe('success');
    expect(response.subscriptionProduct).toBeDefined();
  });
  
  test('should tokenize card securely', async () => {
    const cardData = createTestCardData();
    const response = await IyzicoService.saveCard(cardData, 'test_customer_id');
    
    expect(response.status).toBe('success');
    expect(response.cardToken).toBeDefined();
  });
});
```

## 📝 İyzico Entegrasyon Checklist

### Development Phase
- [ ] İyzico API credentials setup (sandbox)
- [ ] Subscription product creation
- [ ] Customer management implementation
- [ ] Card tokenization system
- [ ] Subscription lifecycle endpoints
- [ ] Payment method CRUD operations
- [ ] Error handling & user feedback
- [ ] Security implementation (PCI DSS)

### Testing Phase
- [ ] Unit tests for all subscription functions
- [ ] Integration tests with İyzico sandbox
- [ ] UI/UX testing for all user flows
- [ ] Security testing & vulnerability assessment
- [ ] Performance testing under load
- [ ] Mobile responsiveness testing

### Production Deployment
- [ ] Production API credentials configuration
- [ ] SSL certificate validation
- [ ] Security audit completion
- [ ] Monitoring & alerting setup
- [ ] Backup & recovery procedures
- [ ] Documentation completion

### Post-Launch Monitoring
- [ ] Subscription metrics tracking
- [ ] Payment success/failure rates
- [ ] User engagement analytics
- [ ] Performance monitoring
- [ ] Security incident response
- [ ] Customer support integration

---

Bu kurallar QuickUtil.app projesinin kalitesini, performansını ve maintainability'sini artırmak için tasarlanmıştır. Her zaman güncel tut ve proje gereksinimlerine göre adapte et. 